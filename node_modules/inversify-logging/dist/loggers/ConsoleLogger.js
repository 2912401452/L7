"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var ILogger_1 = require("./ILogger");
var lodash_1 = require("lodash");
var ConsoleLogger = (function () {
    function ConsoleLogger(config) {
        if (config === void 0) { config = new ILogger_1.DefaultLoggerConfig(); }
        this.config = config;
        this.context = [];
    }
    ConsoleLogger_1 = ConsoleLogger;
    ConsoleLogger.prototype.debug = function () {
        var messages = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            messages[_i] = arguments[_i];
        }
        if (this.config.logLevel <= ILogger_1.LogLevel.Debug)
            console.log.apply(console, [this.stringifyContext(this.context)].concat(messages));
    };
    ConsoleLogger.prototype.info = function () {
        var messages = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            messages[_i] = arguments[_i];
        }
        if (this.config.logLevel <= ILogger_1.LogLevel.Info)
            console.info.apply(console, [this.stringifyContext(this.context)].concat(messages));
    };
    ConsoleLogger.prototype.warning = function () {
        var messages = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            messages[_i] = arguments[_i];
        }
        if (this.config.logLevel <= ILogger_1.LogLevel.Warning)
            console.warn.apply(console, [this.stringifyContext(this.context)].concat(messages));
    };
    ConsoleLogger.prototype.error = function () {
        var errors = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            errors[_i] = arguments[_i];
        }
        console.error.apply(console, [this.stringifyContext(this.context)].concat(errors));
    };
    ConsoleLogger.prototype.setLogLevel = function () {
    };
    ConsoleLogger.prototype.createChildLogger = function (context) {
        var copy = lodash_1.map(this.context, lodash_1.clone);
        if (context)
            copy.push(context);
        var logger = new ConsoleLogger_1(this.config);
        logger.setContext(copy);
        return logger;
    };
    ConsoleLogger.prototype.setContext = function (context) {
        this.context = context;
    };
    ConsoleLogger.prototype.stringifyContext = function (context) {
        return context.length ? "[" + context.join(".") + "]" : "";
    };
    ConsoleLogger = ConsoleLogger_1 = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject("ILoggerConfig")), __param(0, inversify_1.optional()),
        __metadata("design:paramtypes", [Object])
    ], ConsoleLogger);
    return ConsoleLogger;
    var ConsoleLogger_1;
}());
exports.default = ConsoleLogger;
