{"componentChunkName":"component---node-modules-antv-gatsby-theme-antv-site-templates-example-tsx","path":"/en/examples/react/covid","result":{"data":{"site":{"siteMetadata":{"title":"L7","githubUrl":"https://github.com/antvis/L7","examples":[{"slug":"gallery","icon":"gallery","title":{"zh":"官方精品库","en":"Featured"}},{"slug":"react","icon":"map","title":{"zh":"React 组件","en":"React Demo"}},{"slug":"point","icon":"point","title":{"zh":"点图层","en":"Point Layer"}},{"slug":"line","icon":"line","title":{"zh":"线图层","en":"Line Layer"}},{"slug":"polygon","icon":"polygon","title":{"zh":"面图层","en":"Polygon Layer"}},{"slug":"heatmap","icon":"heatmap","title":{"zh":"热力图","en":"HeatMap Layer"}},{"slug":"raster","icon":"raster","title":{"zh":"栅格图层","en":"Raster Layer"}},{"slug":"tutorial","icon":"map","title":{"zh":"教程示例","en":"Tutorial demo"}}],"playground":{"container":"<div style=\"min-height: 500px; justify-content: center;position: relative\" id=\"map\"/>","playgroundDidMount":null,"playgroundWillUnmount":null,"dependencies":{"@antv/l7":"latest","@antv/l7-maps":"latest"},"htmlCodeTemplate":null}},"pathPrefix":""},"allMarkdownRemark":{"edges":[{"node":{"html":"","fields":{"slug":"/en/examples/gallery"},"frontmatter":{"title":"Gallery","order":-1,"icon":"other"},"parent":{"__typename":"File","relativePath":"gallery/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/gallery"},"frontmatter":{"title":"所有图表","order":-1,"icon":"other"},"parent":{"__typename":"File","relativePath":"gallery/index.zh.md"}}},{"node":{"html":"<p>how to  use L7 Initialize third-party maps</p>","fields":{"slug":"/en/examples/tutorial/map"},"frontmatter":{"title":"map","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"tutorial/map/index.en.md"}}},{"node":{"html":"<p>介绍如何初始化一个第三方底图</p>","fields":{"slug":"/zh/examples/tutorial/map"},"frontmatter":{"title":"地图","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"tutorial/map/index.zh.md"}}},{"node":{"html":"<p><a href=\"https://github.com/antvis/L7\" target=\"_self\" rel=\"nofollow\"><img src=\"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*Nk9mQ48ZoZMAAAAAAAAAAABkARQnAQ\" alt=\"github\"></a></p>","fields":{"slug":"/en/examples/react/covid"},"frontmatter":{"title":"COVID-19 Map","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"react/covid/index.en.md"}}},{"node":{"html":"<p><a href=\"https://github.com/antvis/L7\" target=\"_self\" rel=\"nofollow\"><img src=\"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*Nk9mQ48ZoZMAAAAAAAAAAABkARQnAQ\" alt=\"github\"></a></p>","fields":{"slug":"/zh/examples/react/covid"},"frontmatter":{"title":"COVID-19 地图","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"react/covid/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/raster/basic"},"frontmatter":{"title":"Raster Map","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"raster/basic/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/raster/basic"},"frontmatter":{"title":"栅格图层","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"raster/basic/index.zh.md"}}},{"node":{"html":"<p>填充图，也叫分级统计图，指用一连串首尾闭合的点坐标对来表达的面图层，常用表达区域范围具有分类现象的面状分布。</p>","fields":{"slug":"/zh/examples/polygon/fill"},"frontmatter":{"title":"填充地图","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"polygon/fill/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/polygon/fill"},"frontmatter":{"title":"Choropleth Map","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"polygon/fill/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/polygon/3d"},"frontmatter":{"title":"Extrude Map","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"polygon/3d/index.en.md"}}},{"node":{"html":"<p>填充地图的增强实现，通过三维视角中的高度体现数据差异。</p>","fields":{"slug":"/zh/examples/polygon/3d"},"frontmatter":{"title":"3D填充图","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"polygon/3d/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/point/bubble"},"frontmatter":{"title":"Bubble Map","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"point/bubble/index.en.md"}}},{"node":{"html":"<p>指地图上可用一个形状相同、大小和与其代表的数值成固定比率的圆点符号来定位的点图层，用于表达离散现象分布特征的地图。</p>","fields":{"slug":"/zh/examples/point/bubble"},"frontmatter":{"title":"气泡地图","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"point/bubble/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/line/path"},"frontmatter":{"title":"Path Map","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"line/path/index.en.md"}}},{"node":{"html":"<p>指需要用一连串首尾不闭合的点坐标对来定位的线图层，通常用来表示轨迹，线路，道路等</p>","fields":{"slug":"/zh/examples/line/path"},"frontmatter":{"title":"路径地图","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"line/path/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/heatmap/heatmap"},"frontmatter":{"title":"HeatMap","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"heatmap/heatmap/index.en.md"}}},{"node":{"html":"<p>区域范围内数据具有的一定热度分级分布情况的聚合面状现象，常用于描述人群分布、密度和变化趋势等。</p>","fields":{"slug":"/zh/examples/heatmap/heatmap"},"frontmatter":{"title":"经典热力图","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"heatmap/heatmap/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/gallery/animate"},"frontmatter":{"title":"Animate","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"gallery/animate/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/gallery/animate"},"frontmatter":{"title":"动画","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"gallery/animate/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/react/scene"},"frontmatter":{"title":"Scene 组件","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"react/scene/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/react/scene"},"frontmatter":{"title":"Scene Component","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"react/scene/index.en.md"}}},{"node":{"html":"<p>文本标注图层</p>\n<h2 id=\"使用\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E7%94%A8\" aria-label=\"使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用</h2>\n<h2 id=\"shape\" style=\"position:relative;\"><a href=\"#shape\" aria-label=\"shape permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>shape</h2>\n<ul>\n<li>text\n文本渲染需要将指定字段的shape设置成 text</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">layer<span class=\"token punctuation\">.</span><span class=\"token function\">shape</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2 id=\"color\" style=\"position:relative;\"><a href=\"#color\" aria-label=\"color permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>color</h2>\n<p> 同layer color</p>\n<h2 id=\"size\" style=\"position:relative;\"><a href=\"#size\" aria-label=\"size permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>size</h2>\n<p> 同layer size</p>\n<h2 id=\"style\" style=\"position:relative;\"><a href=\"#style\" aria-label=\"style permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>style</h2>\n<ul>\n<li>textAnchor: 'center', // 文本相对锚点的位置 center|left|right|top|bottom|top-left</li>\n<li>textOffset: [ 0, 0 ], // 文本相对锚点的偏移量 [水平, 垂直]</li>\n<li>spacing: 2, // 字符间距</li>\n<li>padding: [ 1, 1 ], // 文本包围盒 padding [水平，垂直]，影响碰撞检测结果，避免相邻文本靠的太近</li>\n<li>stroke: '#ffffff', // 描边颜色</li>\n<li>strokeWidth: 0.3, // 描边宽度</li>\n<li>strokeOpacity: 1.0</li>\n</ul>","fields":{"slug":"/en/examples/point/text"},"frontmatter":{"title":"label","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"point/text/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/point/text"},"frontmatter":{"title":"文本标注","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"point/text/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/point/scatter"},"frontmatter":{"title":"Scatter Map","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"point/scatter/index.en.md"}}},{"node":{"html":"<p>指地图上可用一个形状大小相同的点状符号来定位，用表达离散现象分布特征的地图，如人口、农作物、动植物等的分布。</p>","fields":{"slug":"/zh/examples/point/scatter"},"frontmatter":{"title":"散点地图","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"point/scatter/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/point/dot"},"frontmatter":{"title":"Dot Intensity","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"point/dot/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/point/dot"},"frontmatter":{"title":"亮度图","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"point/dot/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/point/cluster"},"frontmatter":{"title":"Cluster Map","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"point/cluster/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/point/cluster"},"frontmatter":{"title":"聚合图","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"point/cluster/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/line/arc"},"frontmatter":{"title":"Arc Line Map","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"line/arc/index.en.md"}}},{"node":{"html":"<p>将两个点的连线绘制成弧形，绘制的弧线可以是贝塞尔曲线，大圆航线，通常用来表示两种地理事物关系和联系，或者人口迁移，物流起点目的地等。</p>","fields":{"slug":"/zh/examples/line/arc"},"frontmatter":{"title":"弧线地图","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"line/arc/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/heatmap/hexagon"},"frontmatter":{"title":"Hexagon Map","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"heatmap/hexagon/index.en.md"}}},{"node":{"html":"<p>热力图的变体，蜂窝布局呈现数据分级分布的聚合现象。</p>","fields":{"slug":"/zh/examples/heatmap/hexagon"},"frontmatter":{"title":"蜂窝热力图","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"heatmap/hexagon/index.zh.md"}}},{"node":{"html":"<p>热力图的变体，网格布局呈现数据分级分布的聚合现象。</p>","fields":{"slug":"/zh/examples/heatmap/grid"},"frontmatter":{"title":"网格热力图","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"heatmap/grid/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/heatmap/grid"},"frontmatter":{"title":"Grid Map","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"heatmap/grid/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/gallery/basic"},"frontmatter":{"title":"Featured","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gallery/basic/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/gallery/basic"},"frontmatter":{"title":"基础可视化","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gallery/basic/index.zh.md"}}},{"node":{"html":"<p>add  Rich text  annotation  to scene</p>","fields":{"slug":"/en/examples/tutorial/marker"},"frontmatter":{"title":"control","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"tutorial/marker/index.en.md"}}},{"node":{"html":"<p>通过添加dom实现富文本地图标注</p>","fields":{"slug":"/zh/examples/tutorial/marker"},"frontmatter":{"title":"Marker","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"tutorial/marker/index.zh.md"}}},{"node":{"html":"<p>How to use the map control</p>","fields":{"slug":"/en/examples/tutorial/control"},"frontmatter":{"title":"control","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"tutorial/control/index.en.md"}}},{"node":{"html":"<p>如何使用组件</p>","fields":{"slug":"/zh/examples/tutorial/control"},"frontmatter":{"title":"组件","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"tutorial/control/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/react/layer"},"frontmatter":{"title":"Layer Component","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"react/layer/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/react/layer"},"frontmatter":{"title":"Layer 组件","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"react/layer/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/point/image"},"frontmatter":{"title":"Symbol Map","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"point/image/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/point/image"},"frontmatter":{"title":"符号地图","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"point/image/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/line/isoline"},"frontmatter":{"title":"Isoline Map","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"line/isoline/index.en.md"}}},{"node":{"html":"<p>指需要用一连串首尾闭合相等数值点的连线的图层，表示连续分布且逐渐变化的数量特征的地图，常用于等高线图、等温线图等图。</p>","fields":{"slug":"/zh/examples/line/isoline"},"frontmatter":{"title":"等值线地图","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"line/isoline/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/react/control"},"frontmatter":{"title":"Control Component","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"react/control/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/react/control"},"frontmatter":{"title":"Control 组件","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"react/control/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/point/column"},"frontmatter":{"title":"Column Map","order":4,"icon":null},"parent":{"__typename":"File","relativePath":"point/column/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/point/column"},"frontmatter":{"title":"3D 柱状地图","order":4,"icon":null},"parent":{"__typename":"File","relativePath":"point/column/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/point/chart"},"frontmatter":{"title":"Chart Map","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"point/chart/index.en.md"}}},{"node":{"html":"<p>使用二维统计图表代替点状符号的一种特殊复合形式，复合图表地图中常用扩展图形还有柱状图、曲线图、玫瑰图等</p>","fields":{"slug":"/zh/examples/point/chart"},"frontmatter":{"title":"复合图表地图","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"point/chart/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/point/marker"},"frontmatter":{"title":"Custom Marker","order":7,"icon":null},"parent":{"__typename":"File","relativePath":"point/marker/index.en.md"}}},{"node":{"html":"<p>可自定义点符号，通过自定义dom实现地图标注，富文本、动态点状符号都可用于地图上信息的标记。</p>","fields":{"slug":"/zh/examples/point/marker"},"frontmatter":{"title":"自定义 Marker","order":7,"icon":null},"parent":{"__typename":"File","relativePath":"point/marker/index.zh.md"}}}]}},"pageContext":{"exampleSections":{"examples":[{"relativePath":"react/covid/demo/covid_grid.tsx","absolutePath":"/Users/lizhengxue/Documents/AntV/github/l7-release/L7/examples/react/covid/demo/covid_grid.tsx","order":0,"filename":"covid_grid.tsx","title":"世界地图网格背景","screenshot":"https://gw.alipayobjects.com/mdn/rms_23a451/afts/img/A*CSUXTIYXXFwAAAAAAAAAAABkARQnAQ","source":"import {\n  HeatmapLayer,\n  LayerEvent,\n  LineLayer,\n  MapboxScene,\n  Marker,\n  PointLayer,\n  PolygonLayer,\n  Popup,\n} from '@antv/l7-react';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nconst colors =\n ['#f7fcf0','#e0f3db','#ccebc5','#a8ddb5','#7bccc4','#4eb3d3','#2b8cbe','#08589e'].reverse();\nfunction joinData(geodata: any, ncovData: any) {\n  const ncovDataObj: any = {};\n  ncovData.forEach((item: any) => {\n    const {\n      countryName,\n      countryEnglishName,\n      currentConfirmedCount,\n      confirmedCount,\n      suspectedCount,\n      curedCount,\n      deadCount,\n    } = item;\n    if (countryName === '中国') {\n      if (!ncovDataObj[countryName]) {\n        ncovDataObj[countryName] = {\n          countryName,\n          countryEnglishName,\n          currentConfirmedCount: 0,\n          confirmedCount: 0,\n          suspectedCount: 0,\n          curedCount: 0,\n          deadCount: 0,\n        };\n      } else {\n        ncovDataObj[countryName].currentConfirmedCount += currentConfirmedCount;\n        ncovDataObj[countryName].confirmedCount += confirmedCount;\n        ncovDataObj[countryName].suspectedCount += suspectedCount;\n        ncovDataObj[countryName].curedCount += curedCount;\n        ncovDataObj[countryName].deadCount += deadCount;\n      }\n    } else {\n      ncovDataObj[countryName] = {\n        countryName,\n        countryEnglishName,\n        currentConfirmedCount,\n        confirmedCount,\n        suspectedCount,\n        curedCount,\n        deadCount,\n      };\n    }\n  });\n  const geoObj: any = {};\n  geodata.features.forEach((feature: any) => {\n    const { name } = feature.properties;\n    geoObj[name] = feature.properties;\n    const ncov = ncovDataObj[name] || {};\n    feature.properties = {\n      ...feature.properties,\n      ...ncov,\n    };\n  });\n  return geodata;\n}\n\nconst World = React.memo(function Map() {\n  const [data, setData] = React.useState();\n  const [filldata, setfillData] = React.useState();\n  const [popupInfo, setPopupInfo] = React.useState<{\n    lnglat: number[];\n    feature: any;\n  }>();\n  React.useEffect(() => {\n    const fetchData = async () => {\n      const [geoData, ncovData, gridData] = await Promise.all([\n        fetch(\n          'https://gw.alipayobjects.com/os/bmw-prod/e62a2f3b-ea99-4c98-9314-01d7c886263d.json',\n        ).then((d) => d.json()),\n        // https://lab.isaaclin.cn/nCoV/api/area?latest=1\n        fetch(\n          'https://gw.alipayobjects.com/os/bmw-prod/0676f102-22f6-4c75-ab12-1ae200834b1c.json',\n        ).then((d) => d.json()),\n        fetch(\n          'https://gw.alipayobjects.com/os/bmw-prod/8990e8b4-c58e-419b-afb9-8ea3daff2dd1.json',\n        ).then((d) => d.json()),\n      ]);\n      const worldData = joinData(geoData, ncovData.results);\n      const pointdata = worldData.features.map((feature: any) => {\n        return feature.properties;\n      });\n      setfillData(gridData);\n      setData(pointdata);\n    };\n    fetchData();\n  }, []);\n  function showPopup(args: any): void {\n    setPopupInfo({\n      lnglat: args.lngLat,\n      feature: args.feature,\n    });\n  }\n\n  return (\n    <>\n      <MapboxScene\n        map={{\n          center: [110.19382669582967, 50.258134],\n          pitch: 0,\n          style: 'blank',\n          zoom: 1,\n        }}\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n        }}\n      >\n        {popupInfo && (\n          <Popup lnglat={popupInfo.lnglat}>\n            {popupInfo.feature.name}\n            <ul\n              style={{\n                margin: 0,\n              }}\n            >\n              <li>现有确诊:{popupInfo.feature.currentConfirmedCount}</li>\n              <li>累计确诊:{popupInfo.feature.confirmedCount}</li>\n              <li>治愈:{popupInfo.feature.curedCount}</li>\n              <li>死亡:{popupInfo.feature.deadCount}</li>\n            </ul>\n          </Popup>\n        )}\n        {data && [\n          <HeatmapLayer\n            key={'1'}\n            source={{\n              data: filldata,\n              transforms: [\n                {\n                  type: 'hexagon',\n                  size: 500000,\n                  field: 'capacity',\n                  method: 'sum',\n                },\n              ],\n            }}\n            color={{\n              values: 'rgb(221,230,238)',\n            }}\n            shape={{\n              values: 'hexagon',\n            }}\n            style={{\n              coverage: 0.7,\n              angle: 0.3,\n              opacity: 0.8,\n            }}\n          />,\n          <PointLayer\n            key={'2'}\n            options={{\n              autoFit: true,\n            }}\n            source={{\n              data,\n              parser: {\n                type: 'json',\n                coordinates: 'centroid',\n              },\n            }}\n            scale={{\n              values: {\n                confirmedCount: {\n                  type: 'log',\n                },\n              },\n            }}\n            color={{\n              field: 'confirmedCount',\n              values: (count) => {\n                return count > 10000\n                  ? colors[6]\n                  : count > 1000\n                  ? colors[5]\n                  : count > 500\n                  ? colors[4]\n                  : count > 100\n                  ? colors[3]\n                  : count > 10\n                  ? colors[2]\n                  : count > 1\n                  ? colors[1]\n                  : colors[0];\n              },\n            }}\n            shape={{\n              values: 'circle',\n            }}\n            active={{\n              option: {\n                color: '#0c2c84',\n              },\n            }}\n            size={{\n              field: 'confirmedCount',\n              values: [0, 20],\n            }}\n            style={{\n              opacity: 0.6,\n            }}\n          >\n            <LayerEvent type=\"mousemove\" handler={showPopup} />\n          </PointLayer>,\n        ]}\n      </MapboxScene>\n    </>\n  );\n});\nReactDOM.render(<World />, document.getElementById('map'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/l7-react\", \"react\", \"react-dom\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/l7-react\"), require(\"react\"), require(\"react-dom\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.l7React, global.react, global.reactDom);\n    global.covid_grid = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_l7React, React, _reactDom) {\n  \"use strict\";\n\n  React = _interopRequireWildcard(React);\n  _reactDom = _interopRequireDefault(_reactDom);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  var colors = ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#08589e'].reverse();\n\n  function joinData(geodata, ncovData) {\n    var ncovDataObj = {};\n    ncovData.forEach(function (item) {\n      var countryName = item.countryName,\n          countryEnglishName = item.countryEnglishName,\n          currentConfirmedCount = item.currentConfirmedCount,\n          confirmedCount = item.confirmedCount,\n          suspectedCount = item.suspectedCount,\n          curedCount = item.curedCount,\n          deadCount = item.deadCount;\n\n      if (countryName === '中国') {\n        if (!ncovDataObj[countryName]) {\n          ncovDataObj[countryName] = {\n            countryName: countryName,\n            countryEnglishName: countryEnglishName,\n            currentConfirmedCount: 0,\n            confirmedCount: 0,\n            suspectedCount: 0,\n            curedCount: 0,\n            deadCount: 0\n          };\n        } else {\n          ncovDataObj[countryName].currentConfirmedCount += currentConfirmedCount;\n          ncovDataObj[countryName].confirmedCount += confirmedCount;\n          ncovDataObj[countryName].suspectedCount += suspectedCount;\n          ncovDataObj[countryName].curedCount += curedCount;\n          ncovDataObj[countryName].deadCount += deadCount;\n        }\n      } else {\n        ncovDataObj[countryName] = {\n          countryName: countryName,\n          countryEnglishName: countryEnglishName,\n          currentConfirmedCount: currentConfirmedCount,\n          confirmedCount: confirmedCount,\n          suspectedCount: suspectedCount,\n          curedCount: curedCount,\n          deadCount: deadCount\n        };\n      }\n    });\n    var geoObj = {};\n    geodata.features.forEach(function (feature) {\n      var name = feature.properties.name;\n      geoObj[name] = feature.properties;\n      var ncov = ncovDataObj[name] || {};\n      feature.properties = { ...feature.properties,\n        ...ncov\n      };\n    });\n    return geodata;\n  }\n\n  var World = React.memo(function Map() {\n    var _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        data = _React$useState2[0],\n        setData = _React$useState2[1];\n\n    var _React$useState3 = React.useState(),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        filldata = _React$useState4[0],\n        setfillData = _React$useState4[1];\n\n    var _React$useState5 = React.useState(),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        popupInfo = _React$useState6[0],\n        setPopupInfo = _React$useState6[1];\n\n    React.useEffect(function () {\n      var fetchData = async function fetchData() {\n        var _ref = await Promise.all([fetch('https://gw.alipayobjects.com/os/bmw-prod/e62a2f3b-ea99-4c98-9314-01d7c886263d.json').then(function (d) {\n          return d.json();\n        }), // https://lab.isaaclin.cn/nCoV/api/area?latest=1\n        fetch('https://gw.alipayobjects.com/os/bmw-prod/0676f102-22f6-4c75-ab12-1ae200834b1c.json').then(function (d) {\n          return d.json();\n        }), fetch('https://gw.alipayobjects.com/os/bmw-prod/8990e8b4-c58e-419b-afb9-8ea3daff2dd1.json').then(function (d) {\n          return d.json();\n        })]),\n            _ref2 = _slicedToArray(_ref, 3),\n            geoData = _ref2[0],\n            ncovData = _ref2[1],\n            gridData = _ref2[2];\n\n        var worldData = joinData(geoData, ncovData.results);\n        var pointdata = worldData.features.map(function (feature) {\n          return feature.properties;\n        });\n        setfillData(gridData);\n        setData(pointdata);\n      };\n\n      fetchData();\n    }, []);\n\n    function showPopup(args) {\n      setPopupInfo({\n        lnglat: args.lngLat,\n        feature: args.feature\n      });\n    }\n\n    return React.createElement(React.Fragment, null, React.createElement(_l7React.MapboxScene, {\n      map: {\n        center: [110.19382669582967, 50.258134],\n        pitch: 0,\n        style: 'blank',\n        zoom: 1\n      },\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0\n      }\n    }, popupInfo && React.createElement(_l7React.Popup, {\n      lnglat: popupInfo.lnglat\n    }, popupInfo.feature.name, React.createElement(\"ul\", {\n      style: {\n        margin: 0\n      }\n    }, React.createElement(\"li\", null, \"\\u73B0\\u6709\\u786E\\u8BCA:\", popupInfo.feature.currentConfirmedCount), React.createElement(\"li\", null, \"\\u7D2F\\u8BA1\\u786E\\u8BCA:\", popupInfo.feature.confirmedCount), React.createElement(\"li\", null, \"\\u6CBB\\u6108:\", popupInfo.feature.curedCount), React.createElement(\"li\", null, \"\\u6B7B\\u4EA1:\", popupInfo.feature.deadCount))), data && [React.createElement(_l7React.HeatmapLayer, {\n      key: '1',\n      source: {\n        data: filldata,\n        transforms: [{\n          type: 'hexagon',\n          size: 500000,\n          field: 'capacity',\n          method: 'sum'\n        }]\n      },\n      color: {\n        values: 'rgb(221,230,238)'\n      },\n      shape: {\n        values: 'hexagon'\n      },\n      style: {\n        coverage: 0.7,\n        angle: 0.3,\n        opacity: 0.8\n      }\n    }), React.createElement(_l7React.PointLayer, {\n      key: '2',\n      options: {\n        autoFit: true\n      },\n      source: {\n        data: data,\n        parser: {\n          type: 'json',\n          coordinates: 'centroid'\n        }\n      },\n      scale: {\n        values: {\n          confirmedCount: {\n            type: 'log'\n          }\n        }\n      },\n      color: {\n        field: 'confirmedCount',\n        values: function values(count) {\n          return count > 10000 ? colors[6] : count > 1000 ? colors[5] : count > 500 ? colors[4] : count > 100 ? colors[3] : count > 10 ? colors[2] : count > 1 ? colors[1] : colors[0];\n        }\n      },\n      shape: {\n        values: 'circle'\n      },\n      active: {\n        option: {\n          color: '#0c2c84'\n        }\n      },\n      size: {\n        field: 'confirmedCount',\n        values: [0, 20]\n      },\n      style: {\n        opacity: 0.6\n      }\n    }, React.createElement(_l7React.LayerEvent, {\n      type: \"mousemove\",\n      handler: showPopup\n    }))]));\n  });\n\n  _reactDom.default.render(React.createElement(World, null), document.getElementById('map'));\n});"},{"relativePath":"react/covid/demo/covid_animate.tsx","absolutePath":"/Users/lizhengxue/Documents/AntV/github/l7-release/L7/examples/react/covid/demo/covid_animate.tsx","order":1,"filename":"covid_animate.tsx","title":"气泡动图","screenshot":"https://gw.alipayobjects.com/mdn/rms_855bab/afts/img/A*4Er4Qo128bkAAAAAAAAAAABkARQnAQ","source":"import {\n  LayerEvent,\n  LineLayer,\n  MapboxScene,\n  Marker,\n  PointLayer,\n  PolygonLayer,\n  Popup,\n} from '@antv/l7-react';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nfunction joinData(geodata: any, ncovData: any) {\n  const ncovDataObj: any = {};\n  ncovData.forEach((item: any) => {\n    const {\n      countryName,\n      countryEnglishName,\n      currentConfirmedCount,\n      confirmedCount,\n      suspectedCount,\n      curedCount,\n      deadCount,\n    } = item;\n    if (countryName === '中国') {\n      if (!ncovDataObj[countryName]) {\n        ncovDataObj[countryName] = {\n          countryName: 0,\n          countryEnglishName,\n          currentConfirmedCount: 0,\n          confirmedCount: 0,\n          suspectedCount: 0,\n          curedCount: 0,\n          deadCount: 0,\n        };\n      } else {\n        ncovDataObj[countryName].currentConfirmedCount += currentConfirmedCount;\n        ncovDataObj[countryName].confirmedCount += confirmedCount;\n        ncovDataObj[countryName].suspectedCount += suspectedCount;\n        ncovDataObj[countryName].curedCount += curedCount;\n        ncovDataObj[countryName].deadCount += deadCount;\n      }\n    } else {\n      ncovDataObj[countryName] = {\n        countryName,\n        countryEnglishName,\n        currentConfirmedCount,\n        confirmedCount,\n        suspectedCount,\n        curedCount,\n        deadCount,\n      };\n    }\n  });\n  const geoObj: any = {};\n  geodata.features.forEach((feature: any) => {\n    const { name } = feature.properties;\n    geoObj[name] = feature.properties;\n    const ncov = ncovDataObj[name] || {};\n    feature.properties = {\n      ...feature.properties,\n      ...ncov,\n    };\n  });\n  return geodata;\n}\n\nconst World = React.memo(function Map() {\n  const [data, setData] = React.useState();\n  const [filldata, setfillData] = React.useState();\n  const [popupInfo, setPopupInfo] = React.useState<{\n    lnglat: number[];\n    feature: any;\n  }>();\n  React.useEffect(() => {\n    const fetchData = async () => {\n      const [geoData, ncovData] = await Promise.all([\n        fetch(\n          'https://gw.alipayobjects.com/os/bmw-prod/e62a2f3b-ea99-4c98-9314-01d7c886263d.json',\n        ).then((d) => d.json()),\n        // https://lab.isaaclin.cn/nCoV/api/area?latest=1\n        fetch(\n          'https://gw.alipayobjects.com/os/bmw-prod/0676f102-22f6-4c75-ab12-1ae200834b1c.json',\n        ).then((d) => d.json()),\n      ]);\n      const worldData = joinData(geoData, ncovData.results);\n      const pointdata = worldData.features.map((feature: any) => {\n        return feature.properties;\n      });\n      setfillData(worldData);\n      setData(pointdata);\n    };\n    fetchData();\n  }, []);\n  function showPopup(args: any): void {\n    setPopupInfo({\n      lnglat: args.lngLat,\n      feature: args.feature,\n    });\n  }\n\n  return (\n    <>\n      <MapboxScene\n        map={{\n          center: [110.19382669582967, 50.258134],\n          pitch: 0,\n          style: 'blank',\n          zoom: 1,\n        }}\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n        }}\n      >\n        {popupInfo && (\n          <Popup lnglat={popupInfo.lnglat}>\n            {popupInfo.feature.name}\n            <ul\n              style={{\n                margin: 0,\n              }}\n            >\n              <li>现有确诊:{popupInfo.feature.currentConfirmedCount}</li>\n              <li>累计确诊:{popupInfo.feature.confirmedCount}</li>\n              <li>治愈:{popupInfo.feature.curedCount}</li>\n              <li>死亡:{popupInfo.feature.deadCount}</li>\n            </ul>\n          </Popup>\n        )}\n        {data && [\n          <PolygonLayer\n            key={'1'}\n            options={{\n              autoFit: false,\n            }}\n            source={{\n              data: filldata,\n            }}\n            scale={{\n              values: {\n                confirmedCount: {\n                  type: 'quantile',\n                },\n              },\n            }}\n            color={{\n              values: '#ddd',\n            }}\n            shape={{\n              values: 'fill',\n            }}\n            style={{\n              opacity: 1,\n            }}\n          />,\n          <LineLayer\n            key={'3'}\n            source={{\n              data: filldata,\n            }}\n            size={{\n              values: 0.6,\n            }}\n            color={{\n              values: '#fff',\n            }}\n            shape={{\n              values: 'line',\n            }}\n            style={{\n              opacity: 1,\n            }}\n          />,\n          <PointLayer\n            key={'2'}\n            options={{\n              autoFit: true,\n            }}\n            source={{\n              data,\n              parser: {\n                type: 'json',\n                coordinates: 'centroid',\n              },\n            }}\n            scale={{\n              values: {\n                confirmedCount: {\n                  type: 'log',\n                },\n              },\n            }}\n            color={{\n              values: '#b10026',\n            }}\n            shape={{\n              values: 'circle',\n            }}\n            active={{\n              option: {\n                color: '#0c2c84',\n              },\n            }}\n            size={{\n              field: 'confirmedCount',\n              values: [5, 60],\n            }}\n            animate={{\n              enable: true,\n            }}\n            style={{\n              opacity: 0.6,\n            }}\n          >\n            <LayerEvent type=\"mousemove\" handler={showPopup} />\n          </PointLayer>,\n        ]}\n      </MapboxScene>\n    </>\n  );\n});\nReactDOM.render(<World />, document.getElementById('map'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/l7-react\", \"react\", \"react-dom\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/l7-react\"), require(\"react\"), require(\"react-dom\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.l7React, global.react, global.reactDom);\n    global.covid_animate = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_l7React, React, _reactDom) {\n  \"use strict\";\n\n  React = _interopRequireWildcard(React);\n  _reactDom = _interopRequireDefault(_reactDom);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  function joinData(geodata, ncovData) {\n    var ncovDataObj = {};\n    ncovData.forEach(function (item) {\n      var countryName = item.countryName,\n          countryEnglishName = item.countryEnglishName,\n          currentConfirmedCount = item.currentConfirmedCount,\n          confirmedCount = item.confirmedCount,\n          suspectedCount = item.suspectedCount,\n          curedCount = item.curedCount,\n          deadCount = item.deadCount;\n\n      if (countryName === '中国') {\n        if (!ncovDataObj[countryName]) {\n          ncovDataObj[countryName] = {\n            countryName: 0,\n            countryEnglishName: countryEnglishName,\n            currentConfirmedCount: 0,\n            confirmedCount: 0,\n            suspectedCount: 0,\n            curedCount: 0,\n            deadCount: 0\n          };\n        } else {\n          ncovDataObj[countryName].currentConfirmedCount += currentConfirmedCount;\n          ncovDataObj[countryName].confirmedCount += confirmedCount;\n          ncovDataObj[countryName].suspectedCount += suspectedCount;\n          ncovDataObj[countryName].curedCount += curedCount;\n          ncovDataObj[countryName].deadCount += deadCount;\n        }\n      } else {\n        ncovDataObj[countryName] = {\n          countryName: countryName,\n          countryEnglishName: countryEnglishName,\n          currentConfirmedCount: currentConfirmedCount,\n          confirmedCount: confirmedCount,\n          suspectedCount: suspectedCount,\n          curedCount: curedCount,\n          deadCount: deadCount\n        };\n      }\n    });\n    var geoObj = {};\n    geodata.features.forEach(function (feature) {\n      var name = feature.properties.name;\n      geoObj[name] = feature.properties;\n      var ncov = ncovDataObj[name] || {};\n      feature.properties = { ...feature.properties,\n        ...ncov\n      };\n    });\n    return geodata;\n  }\n\n  var World = React.memo(function Map() {\n    var _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        data = _React$useState2[0],\n        setData = _React$useState2[1];\n\n    var _React$useState3 = React.useState(),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        filldata = _React$useState4[0],\n        setfillData = _React$useState4[1];\n\n    var _React$useState5 = React.useState(),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        popupInfo = _React$useState6[0],\n        setPopupInfo = _React$useState6[1];\n\n    React.useEffect(function () {\n      var fetchData = async function fetchData() {\n        var _ref = await Promise.all([fetch('https://gw.alipayobjects.com/os/bmw-prod/e62a2f3b-ea99-4c98-9314-01d7c886263d.json').then(function (d) {\n          return d.json();\n        }), // https://lab.isaaclin.cn/nCoV/api/area?latest=1\n        fetch('https://gw.alipayobjects.com/os/bmw-prod/0676f102-22f6-4c75-ab12-1ae200834b1c.json').then(function (d) {\n          return d.json();\n        })]),\n            _ref2 = _slicedToArray(_ref, 2),\n            geoData = _ref2[0],\n            ncovData = _ref2[1];\n\n        var worldData = joinData(geoData, ncovData.results);\n        var pointdata = worldData.features.map(function (feature) {\n          return feature.properties;\n        });\n        setfillData(worldData);\n        setData(pointdata);\n      };\n\n      fetchData();\n    }, []);\n\n    function showPopup(args) {\n      setPopupInfo({\n        lnglat: args.lngLat,\n        feature: args.feature\n      });\n    }\n\n    return React.createElement(React.Fragment, null, React.createElement(_l7React.MapboxScene, {\n      map: {\n        center: [110.19382669582967, 50.258134],\n        pitch: 0,\n        style: 'blank',\n        zoom: 1\n      },\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0\n      }\n    }, popupInfo && React.createElement(_l7React.Popup, {\n      lnglat: popupInfo.lnglat\n    }, popupInfo.feature.name, React.createElement(\"ul\", {\n      style: {\n        margin: 0\n      }\n    }, React.createElement(\"li\", null, \"\\u73B0\\u6709\\u786E\\u8BCA:\", popupInfo.feature.currentConfirmedCount), React.createElement(\"li\", null, \"\\u7D2F\\u8BA1\\u786E\\u8BCA:\", popupInfo.feature.confirmedCount), React.createElement(\"li\", null, \"\\u6CBB\\u6108:\", popupInfo.feature.curedCount), React.createElement(\"li\", null, \"\\u6B7B\\u4EA1:\", popupInfo.feature.deadCount))), data && [React.createElement(_l7React.PolygonLayer, {\n      key: '1',\n      options: {\n        autoFit: false\n      },\n      source: {\n        data: filldata\n      },\n      scale: {\n        values: {\n          confirmedCount: {\n            type: 'quantile'\n          }\n        }\n      },\n      color: {\n        values: '#ddd'\n      },\n      shape: {\n        values: 'fill'\n      },\n      style: {\n        opacity: 1\n      }\n    }), React.createElement(_l7React.LineLayer, {\n      key: '3',\n      source: {\n        data: filldata\n      },\n      size: {\n        values: 0.6\n      },\n      color: {\n        values: '#fff'\n      },\n      shape: {\n        values: 'line'\n      },\n      style: {\n        opacity: 1\n      }\n    }), React.createElement(_l7React.PointLayer, {\n      key: '2',\n      options: {\n        autoFit: true\n      },\n      source: {\n        data: data,\n        parser: {\n          type: 'json',\n          coordinates: 'centroid'\n        }\n      },\n      scale: {\n        values: {\n          confirmedCount: {\n            type: 'log'\n          }\n        }\n      },\n      color: {\n        values: '#b10026'\n      },\n      shape: {\n        values: 'circle'\n      },\n      active: {\n        option: {\n          color: '#0c2c84'\n        }\n      },\n      size: {\n        field: 'confirmedCount',\n        values: [5, 60]\n      },\n      animate: {\n        enable: true\n      },\n      style: {\n        opacity: 0.6\n      }\n    }, React.createElement(_l7React.LayerEvent, {\n      type: \"mousemove\",\n      handler: showPopup\n    }))]));\n  });\n\n  _reactDom.default.render(React.createElement(World, null), document.getElementById('map'));\n});"},{"relativePath":"react/covid/demo/covid_fill.tsx","absolutePath":"/Users/lizhengxue/Documents/AntV/github/l7-release/L7/examples/react/covid/demo/covid_fill.tsx","order":2,"filename":"covid_fill.tsx","title":"填充图","screenshot":"https://gw.alipayobjects.com/mdn/rms_855bab/afts/img/A*9lzaSrHuYx0AAAAAAAAAAABkARQnAQ","source":"import {\n  LineLayer,\n  MapboxScene,\n  Marker,\n  PolygonLayer,\n  Popup,\n} from '@antv/l7-react';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction joinData(geodata: any, ncovData: any) {\n  const ncovDataObj: any = {};\n  ncovData.forEach((item: any) => {\n    const {\n      countryName,\n      countryEnglishName,\n      currentConfirmedCount,\n      confirmedCount,\n      suspectedCount,\n      curedCount,\n      deadCount,\n    } = item;\n    if (countryName === '中国') {\n      if (!ncovDataObj[countryName]) {\n        ncovDataObj[countryName] = {\n          countryName: 0,\n          countryEnglishName,\n          currentConfirmedCount: 0,\n          confirmedCount: 0,\n          suspectedCount: 0,\n          curedCount: 0,\n          deadCount: 0,\n        };\n      } else {\n        ncovDataObj[countryName].currentConfirmedCount += currentConfirmedCount;\n        ncovDataObj[countryName].confirmedCount += confirmedCount;\n        ncovDataObj[countryName].suspectedCount += suspectedCount;\n        ncovDataObj[countryName].curedCount += curedCount;\n        ncovDataObj[countryName].deadCount += deadCount;\n      }\n    } else {\n      ncovDataObj[countryName] = {\n        countryName,\n        countryEnglishName,\n        currentConfirmedCount,\n        confirmedCount,\n        suspectedCount,\n        curedCount,\n        deadCount,\n      };\n    }\n  });\n  const geoObj: any = {};\n  geodata.features.forEach((feature: any) => {\n    const { name } = feature.properties;\n    geoObj[name] = feature.properties;\n    const ncov = ncovDataObj[name] || {};\n    feature.properties = {\n      ...feature.properties,\n      ...ncov,\n    };\n  });\n  return geodata;\n}\n\nconst World = React.memo(function Map() {\n  const [data, setData] = React.useState();\n  React.useEffect(() => {\n    const fetchData = async () => {\n      const [geoData, ncovData] = await Promise.all([\n        fetch(\n          'https://gw.alipayobjects.com/os/bmw-prod/e62a2f3b-ea99-4c98-9314-01d7c886263d.json',\n        ).then((d) => d.json()),\n        // https://lab.isaaclin.cn/nCoV/api/area?latest=1\n        fetch(\n          'https://gw.alipayobjects.com/os/bmw-prod/0676f102-22f6-4c75-ab12-1ae200834b1c.json',\n        ).then((d) => d.json()),\n      ]);\n      setData(joinData(geoData, ncovData.results));\n    };\n    fetchData();\n  }, []);\n  return (\n    <>\n      <MapboxScene\n        map={{\n          center: [110.19382669582967, 50.258134],\n          pitch: 0,\n          style: 'blank',\n          zoom: 1,\n        }}\n        style={{\n          position: 'absolute',\n          background:'#fff', // 地图背景色\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n        }}\n      >\n        {data && [\n          <PolygonLayer\n            key={'1'}\n            options={{\n              autoFit: true,\n            }}\n            source={{\n              data,\n            }}\n            scale={{\n              values: {\n                confirmedCount: {\n                  type: 'quantile',\n                },\n              },\n            }}\n            active={{\n              option: {\n                color: '#0c2c84',\n              },\n            }}\n            color={{\n              field: 'confirmedCount', // 填充颜色\n              values: [\n                '#732200',\n                '#CC3D00',\n                '#FF6619',\n                '#FF9466',\n                '#FFC1A6',\n                '#FCE2D7',\n              ].reverse()\n            }}\n            shape={{\n              values: 'fill',\n            }}\n            style={{\n              opacity: 1,\n            }}\n          />,\n          <LineLayer\n            key={'2'}\n            source={{\n              data,\n            }}\n            size={{\n              values: 0.6,\n            }}\n            color={{\n              values: '#aaa', // 描边颜色\n            }}\n            shape={{\n              values: 'line',\n            }}\n            style={{\n              opacity: 1,\n            }}\n          />,\n        ]}\n      </MapboxScene>\n    </>\n  );\n});\nReactDOM.render(<World />, document.getElementById('map'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/l7-react\", \"react\", \"react-dom\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/l7-react\"), require(\"react\"), require(\"react-dom\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.l7React, global.react, global.reactDom);\n    global.covid_fill = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_l7React, React, _reactDom) {\n  \"use strict\";\n\n  React = _interopRequireWildcard(React);\n  _reactDom = _interopRequireDefault(_reactDom);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  function joinData(geodata, ncovData) {\n    var ncovDataObj = {};\n    ncovData.forEach(function (item) {\n      var countryName = item.countryName,\n          countryEnglishName = item.countryEnglishName,\n          currentConfirmedCount = item.currentConfirmedCount,\n          confirmedCount = item.confirmedCount,\n          suspectedCount = item.suspectedCount,\n          curedCount = item.curedCount,\n          deadCount = item.deadCount;\n\n      if (countryName === '中国') {\n        if (!ncovDataObj[countryName]) {\n          ncovDataObj[countryName] = {\n            countryName: 0,\n            countryEnglishName: countryEnglishName,\n            currentConfirmedCount: 0,\n            confirmedCount: 0,\n            suspectedCount: 0,\n            curedCount: 0,\n            deadCount: 0\n          };\n        } else {\n          ncovDataObj[countryName].currentConfirmedCount += currentConfirmedCount;\n          ncovDataObj[countryName].confirmedCount += confirmedCount;\n          ncovDataObj[countryName].suspectedCount += suspectedCount;\n          ncovDataObj[countryName].curedCount += curedCount;\n          ncovDataObj[countryName].deadCount += deadCount;\n        }\n      } else {\n        ncovDataObj[countryName] = {\n          countryName: countryName,\n          countryEnglishName: countryEnglishName,\n          currentConfirmedCount: currentConfirmedCount,\n          confirmedCount: confirmedCount,\n          suspectedCount: suspectedCount,\n          curedCount: curedCount,\n          deadCount: deadCount\n        };\n      }\n    });\n    var geoObj = {};\n    geodata.features.forEach(function (feature) {\n      var name = feature.properties.name;\n      geoObj[name] = feature.properties;\n      var ncov = ncovDataObj[name] || {};\n      feature.properties = { ...feature.properties,\n        ...ncov\n      };\n    });\n    return geodata;\n  }\n\n  var World = React.memo(function Map() {\n    var _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        data = _React$useState2[0],\n        setData = _React$useState2[1];\n\n    React.useEffect(function () {\n      var fetchData = async function fetchData() {\n        var _ref = await Promise.all([fetch('https://gw.alipayobjects.com/os/bmw-prod/e62a2f3b-ea99-4c98-9314-01d7c886263d.json').then(function (d) {\n          return d.json();\n        }), // https://lab.isaaclin.cn/nCoV/api/area?latest=1\n        fetch('https://gw.alipayobjects.com/os/bmw-prod/0676f102-22f6-4c75-ab12-1ae200834b1c.json').then(function (d) {\n          return d.json();\n        })]),\n            _ref2 = _slicedToArray(_ref, 2),\n            geoData = _ref2[0],\n            ncovData = _ref2[1];\n\n        setData(joinData(geoData, ncovData.results));\n      };\n\n      fetchData();\n    }, []);\n    return React.createElement(React.Fragment, null, React.createElement(_l7React.MapboxScene, {\n      map: {\n        center: [110.19382669582967, 50.258134],\n        pitch: 0,\n        style: 'blank',\n        zoom: 1\n      },\n      style: {\n        position: 'absolute',\n        background: '#fff',\n        // 地图背景色\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0\n      }\n    }, data && [React.createElement(_l7React.PolygonLayer, {\n      key: '1',\n      options: {\n        autoFit: true\n      },\n      source: {\n        data: data\n      },\n      scale: {\n        values: {\n          confirmedCount: {\n            type: 'quantile'\n          }\n        }\n      },\n      active: {\n        option: {\n          color: '#0c2c84'\n        }\n      },\n      color: {\n        field: 'confirmedCount',\n        // 填充颜色\n        values: ['#732200', '#CC3D00', '#FF6619', '#FF9466', '#FFC1A6', '#FCE2D7'].reverse()\n      },\n      shape: {\n        values: 'fill'\n      },\n      style: {\n        opacity: 1\n      }\n    }), React.createElement(_l7React.LineLayer, {\n      key: '2',\n      source: {\n        data: data\n      },\n      size: {\n        values: 0.6\n      },\n      color: {\n        values: '#aaa' // 描边颜色\n\n      },\n      shape: {\n        values: 'line'\n      },\n      style: {\n        opacity: 1\n      }\n    })]));\n  });\n\n  _reactDom.default.render(React.createElement(World, null), document.getElementById('map'));\n});"},{"relativePath":"react/covid/demo/covid_bubble.tsx","absolutePath":"/Users/lizhengxue/Documents/AntV/github/l7-release/L7/examples/react/covid/demo/covid_bubble.tsx","order":3,"filename":"covid_bubble.tsx","title":"气泡图","screenshot":"https://gw.alipayobjects.com/mdn/rms_855bab/afts/img/A*mAWsSrM52gYAAAAAAAAAAABkARQnAQ","source":"import {\n  LayerEvent,\n  LineLayer,\n  MapboxScene,\n  Marker,\n  PointLayer,\n  PolygonLayer,\n  Popup,\n} from '@antv/l7-react';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nconst colors = [\n  '#732200',\n  '#CC3D00',\n  '#FF6619',\n  '#FF9466',\n  '#FFC1A6',\n  '#FCE2D7',\n  '#ffffff',\n].reverse();\nfunction joinData(geodata: any, ncovData: any) {\n  const ncovDataObj: any = {};\n  ncovData.forEach((item: any) => {\n    const {\n      countryName,\n      countryEnglishName,\n      currentConfirmedCount,\n      confirmedCount,\n      suspectedCount,\n      curedCount,\n      deadCount,\n    } = item;\n    if (countryName === '中国') {\n      if (!ncovDataObj[countryName]) {\n        ncovDataObj[countryName] = {\n          countryName,\n          countryEnglishName,\n          currentConfirmedCount: 0,\n          confirmedCount: 0,\n          suspectedCount: 0,\n          curedCount: 0,\n          deadCount: 0,\n        };\n      } else {\n        ncovDataObj[countryName].currentConfirmedCount += currentConfirmedCount;\n        ncovDataObj[countryName].confirmedCount += confirmedCount;\n        ncovDataObj[countryName].suspectedCount += suspectedCount;\n        ncovDataObj[countryName].curedCount += curedCount;\n        ncovDataObj[countryName].deadCount += deadCount;\n      }\n    } else {\n      ncovDataObj[countryName] = {\n        countryName,\n        countryEnglishName,\n        currentConfirmedCount,\n        confirmedCount,\n        suspectedCount,\n        curedCount,\n        deadCount,\n      };\n    }\n  });\n  const geoObj: any = {};\n  geodata.features.forEach((feature: any) => {\n    const { name } = feature.properties;\n    geoObj[name] = feature.properties;\n    const ncov = ncovDataObj[name] || {};\n    feature.properties = {\n      ...feature.properties,\n      ...ncov,\n    };\n  });\n  return geodata;\n}\n\nconst World = React.memo(function Map() {\n  const [data, setData] = React.useState();\n  const [filldata, setfillData] = React.useState();\n  const [popupInfo, setPopupInfo] = React.useState<{\n    lnglat: number[];\n    feature: any;\n  }>();\n  React.useEffect(() => {\n    const fetchData = async () => {\n      const [geoData, ncovData] = await Promise.all([\n        fetch(\n          'https://gw.alipayobjects.com/os/bmw-prod/e62a2f3b-ea99-4c98-9314-01d7c886263d.json',\n        ).then((d) => d.json()),\n       // https://lab.isaaclin.cn/nCoV/api/area?latest=1\n       fetch(\n        'https://gw.alipayobjects.com/os/bmw-prod/0676f102-22f6-4c75-ab12-1ae200834b1c.json',\n      ).then((d) => d.json()),\n      ]);\n      const worldData = joinData(geoData, ncovData.results);\n      const pointdata = worldData.features.map((feature: any) => {\n        return feature.properties;\n      });\n      setfillData(worldData);\n      setData(pointdata);\n    };\n    fetchData();\n  }, []);\n  function showPopup(args: any): void {\n    setPopupInfo({\n      lnglat: args.lngLat,\n      feature: args.feature,\n    });\n  }\n\n  return (\n    <>\n      <MapboxScene\n        map={{\n          center: [110.19382669582967, 50.258134],\n          pitch: 0,\n          style: 'blank',\n          zoom: 1,\n        }}\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n        }}\n      >\n        {popupInfo && (\n          <Popup lnglat={popupInfo.lnglat}>\n            {popupInfo.feature.name}\n            <ul\n              style={{\n                margin: 0,\n              }}\n            >\n              <li>现有确诊:{popupInfo.feature.currentConfirmedCount}</li>\n              <li>累计确诊:{popupInfo.feature.confirmedCount}</li>\n              <li>治愈:{popupInfo.feature.curedCount}</li>\n              <li>死亡:{popupInfo.feature.deadCount}</li>\n            </ul>\n          </Popup>\n        )}\n        {data && [\n          <PolygonLayer\n            key={'1'}\n            options={{\n              autoFit: true,\n            }}\n            source={{\n              data: filldata,\n            }}\n            scale={{\n              values: {\n                confirmedCount: {\n                  type: 'quantile',\n                },\n              },\n            }}\n            color={{\n              values: '#ddd',\n            }}\n            shape={{\n              values: 'fill',\n            }}\n            style={{\n              opacity: 1,\n            }}\n          />,\n          <LineLayer\n            key={'3'}\n            source={{\n              data: filldata,\n            }}\n            size={{\n              values: 0.6,\n            }}\n            color={{\n              values: '#fff',\n            }}\n            shape={{\n              values: 'line',\n            }}\n            style={{\n              opacity: 1,\n            }}\n          />,\n          <PointLayer\n            key={'2'}\n            options={{\n              autoFit: true,\n            }}\n            source={{\n              data,\n              parser: {\n                type: 'json',\n                coordinates: 'centroid',\n              },\n            }}\n            scale={{\n              values: {\n                confirmedCount: {\n                  type: 'log',\n                },\n              },\n            }}\n            color={{\n              field: 'confirmedCount',\n              values: (count) => {\n                return count > 10000\n                  ? colors[6]\n                  : count > 1000\n                  ? colors[5]\n                  : count > 500\n                  ? colors[4]\n                  : count > 100\n                  ? colors[3]\n                  : count > 10\n                  ? colors[2]\n                  : count > 1\n                  ? colors[1]\n                  : colors[0];\n              },\n            }}\n            shape={{\n              values: 'circle',\n            }}\n            active={{\n              option: {\n                color: '#0c2c84',\n              },\n            }}\n            size={{\n              field: 'confirmedCount',\n              values: [0, 30],\n            }}\n            style={{\n              opacity: 0.8,\n            }}\n          >\n            <LayerEvent type=\"mousemove\" handler={showPopup} />\n          </PointLayer>,\n          <PointLayer\n            key={'5'}\n            source={{\n              data,\n              parser: {\n                type: 'json',\n                coordinates: 'centroid',\n              },\n            }}\n            color={{\n              values: '#fff',\n            }}\n            shape={{\n              field: 'countryName',\n              values: 'text',\n            }}\n            filter={{\n              field: 'currentConfirmedCount',\n              values: (v) => {\n                return v > 500;\n              },\n            }}\n            size={{\n              values: 12,\n            }}\n            style={{\n              opacity: 1,\n              strokeOpacity: 1,\n              strokeWidth: 0,\n            }}\n          >\n            <LayerEvent type=\"mousemove\" handler={showPopup} />\n          </PointLayer>,\n        ]}\n      </MapboxScene>\n    </>\n  );\n});\nReactDOM.render(<World />, document.getElementById('map'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/l7-react\", \"react\", \"react-dom\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/l7-react\"), require(\"react\"), require(\"react-dom\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.l7React, global.react, global.reactDom);\n    global.covid_bubble = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_l7React, React, _reactDom) {\n  \"use strict\";\n\n  React = _interopRequireWildcard(React);\n  _reactDom = _interopRequireDefault(_reactDom);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  var colors = ['#732200', '#CC3D00', '#FF6619', '#FF9466', '#FFC1A6', '#FCE2D7', '#ffffff'].reverse();\n\n  function joinData(geodata, ncovData) {\n    var ncovDataObj = {};\n    ncovData.forEach(function (item) {\n      var countryName = item.countryName,\n          countryEnglishName = item.countryEnglishName,\n          currentConfirmedCount = item.currentConfirmedCount,\n          confirmedCount = item.confirmedCount,\n          suspectedCount = item.suspectedCount,\n          curedCount = item.curedCount,\n          deadCount = item.deadCount;\n\n      if (countryName === '中国') {\n        if (!ncovDataObj[countryName]) {\n          ncovDataObj[countryName] = {\n            countryName: countryName,\n            countryEnglishName: countryEnglishName,\n            currentConfirmedCount: 0,\n            confirmedCount: 0,\n            suspectedCount: 0,\n            curedCount: 0,\n            deadCount: 0\n          };\n        } else {\n          ncovDataObj[countryName].currentConfirmedCount += currentConfirmedCount;\n          ncovDataObj[countryName].confirmedCount += confirmedCount;\n          ncovDataObj[countryName].suspectedCount += suspectedCount;\n          ncovDataObj[countryName].curedCount += curedCount;\n          ncovDataObj[countryName].deadCount += deadCount;\n        }\n      } else {\n        ncovDataObj[countryName] = {\n          countryName: countryName,\n          countryEnglishName: countryEnglishName,\n          currentConfirmedCount: currentConfirmedCount,\n          confirmedCount: confirmedCount,\n          suspectedCount: suspectedCount,\n          curedCount: curedCount,\n          deadCount: deadCount\n        };\n      }\n    });\n    var geoObj = {};\n    geodata.features.forEach(function (feature) {\n      var name = feature.properties.name;\n      geoObj[name] = feature.properties;\n      var ncov = ncovDataObj[name] || {};\n      feature.properties = { ...feature.properties,\n        ...ncov\n      };\n    });\n    return geodata;\n  }\n\n  var World = React.memo(function Map() {\n    var _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        data = _React$useState2[0],\n        setData = _React$useState2[1];\n\n    var _React$useState3 = React.useState(),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        filldata = _React$useState4[0],\n        setfillData = _React$useState4[1];\n\n    var _React$useState5 = React.useState(),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        popupInfo = _React$useState6[0],\n        setPopupInfo = _React$useState6[1];\n\n    React.useEffect(function () {\n      var fetchData = async function fetchData() {\n        var _ref = await Promise.all([fetch('https://gw.alipayobjects.com/os/bmw-prod/e62a2f3b-ea99-4c98-9314-01d7c886263d.json').then(function (d) {\n          return d.json();\n        }), // https://lab.isaaclin.cn/nCoV/api/area?latest=1\n        fetch('https://gw.alipayobjects.com/os/bmw-prod/0676f102-22f6-4c75-ab12-1ae200834b1c.json').then(function (d) {\n          return d.json();\n        })]),\n            _ref2 = _slicedToArray(_ref, 2),\n            geoData = _ref2[0],\n            ncovData = _ref2[1];\n\n        var worldData = joinData(geoData, ncovData.results);\n        var pointdata = worldData.features.map(function (feature) {\n          return feature.properties;\n        });\n        setfillData(worldData);\n        setData(pointdata);\n      };\n\n      fetchData();\n    }, []);\n\n    function showPopup(args) {\n      setPopupInfo({\n        lnglat: args.lngLat,\n        feature: args.feature\n      });\n    }\n\n    return React.createElement(React.Fragment, null, React.createElement(_l7React.MapboxScene, {\n      map: {\n        center: [110.19382669582967, 50.258134],\n        pitch: 0,\n        style: 'blank',\n        zoom: 1\n      },\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0\n      }\n    }, popupInfo && React.createElement(_l7React.Popup, {\n      lnglat: popupInfo.lnglat\n    }, popupInfo.feature.name, React.createElement(\"ul\", {\n      style: {\n        margin: 0\n      }\n    }, React.createElement(\"li\", null, \"\\u73B0\\u6709\\u786E\\u8BCA:\", popupInfo.feature.currentConfirmedCount), React.createElement(\"li\", null, \"\\u7D2F\\u8BA1\\u786E\\u8BCA:\", popupInfo.feature.confirmedCount), React.createElement(\"li\", null, \"\\u6CBB\\u6108:\", popupInfo.feature.curedCount), React.createElement(\"li\", null, \"\\u6B7B\\u4EA1:\", popupInfo.feature.deadCount))), data && [React.createElement(_l7React.PolygonLayer, {\n      key: '1',\n      options: {\n        autoFit: true\n      },\n      source: {\n        data: filldata\n      },\n      scale: {\n        values: {\n          confirmedCount: {\n            type: 'quantile'\n          }\n        }\n      },\n      color: {\n        values: '#ddd'\n      },\n      shape: {\n        values: 'fill'\n      },\n      style: {\n        opacity: 1\n      }\n    }), React.createElement(_l7React.LineLayer, {\n      key: '3',\n      source: {\n        data: filldata\n      },\n      size: {\n        values: 0.6\n      },\n      color: {\n        values: '#fff'\n      },\n      shape: {\n        values: 'line'\n      },\n      style: {\n        opacity: 1\n      }\n    }), React.createElement(_l7React.PointLayer, {\n      key: '2',\n      options: {\n        autoFit: true\n      },\n      source: {\n        data: data,\n        parser: {\n          type: 'json',\n          coordinates: 'centroid'\n        }\n      },\n      scale: {\n        values: {\n          confirmedCount: {\n            type: 'log'\n          }\n        }\n      },\n      color: {\n        field: 'confirmedCount',\n        values: function values(count) {\n          return count > 10000 ? colors[6] : count > 1000 ? colors[5] : count > 500 ? colors[4] : count > 100 ? colors[3] : count > 10 ? colors[2] : count > 1 ? colors[1] : colors[0];\n        }\n      },\n      shape: {\n        values: 'circle'\n      },\n      active: {\n        option: {\n          color: '#0c2c84'\n        }\n      },\n      size: {\n        field: 'confirmedCount',\n        values: [0, 30]\n      },\n      style: {\n        opacity: 0.8\n      }\n    }, React.createElement(_l7React.LayerEvent, {\n      type: \"mousemove\",\n      handler: showPopup\n    })), React.createElement(_l7React.PointLayer, {\n      key: '5',\n      source: {\n        data: data,\n        parser: {\n          type: 'json',\n          coordinates: 'centroid'\n        }\n      },\n      color: {\n        values: '#fff'\n      },\n      shape: {\n        field: 'countryName',\n        values: 'text'\n      },\n      filter: {\n        field: 'currentConfirmedCount',\n        values: function values(v) {\n          return v > 500;\n        }\n      },\n      size: {\n        values: 12\n      },\n      style: {\n        opacity: 1,\n        strokeOpacity: 1,\n        strokeWidth: 0\n      }\n    }, React.createElement(_l7React.LayerEvent, {\n      type: \"mousemove\",\n      handler: showPopup\n    }))]));\n  });\n\n  _reactDom.default.render(React.createElement(World, null), document.getElementById('map'));\n});"},{"relativePath":"react/covid/demo/covid_column.tsx","absolutePath":"/Users/lizhengxue/Documents/AntV/github/l7-release/L7/examples/react/covid/demo/covid_column.tsx","order":4,"filename":"covid_column.tsx","title":"3D柱图","screenshot":"https://gw.alipayobjects.com/mdn/rms_855bab/afts/img/A*aLV4S6QJ104AAAAAAAAAAABkARQnAQ","source":"import {\n  LineLayer,\n  MapboxScene,\n  Marker,\n  PointLayer,\n  PolygonLayer,\n  Popup,\n} from '@antv/l7-react';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nfunction joinData(geodata: any, ncovData: any) {\n  const ncovDataObj: any = {};\n  ncovData.forEach((item: any) => {\n    const {\n      countryName,\n      countryEnglishName,\n      currentConfirmedCount,\n      confirmedCount,\n      suspectedCount,\n      curedCount,\n      deadCount,\n    } = item;\n    if (countryName === '中国') {\n      if (!ncovDataObj[countryName]) {\n        ncovDataObj[countryName] = {\n          countryName: 0,\n          countryEnglishName,\n          currentConfirmedCount: 0,\n          confirmedCount: 0,\n          suspectedCount: 0,\n          curedCount: 0,\n          deadCount: 0,\n        };\n      } else {\n        ncovDataObj[countryName].currentConfirmedCount += currentConfirmedCount;\n        ncovDataObj[countryName].confirmedCount += confirmedCount;\n        ncovDataObj[countryName].suspectedCount += suspectedCount;\n        ncovDataObj[countryName].curedCount += curedCount;\n        ncovDataObj[countryName].deadCount += deadCount;\n      }\n    } else {\n      ncovDataObj[countryName] = {\n        countryName,\n        countryEnglishName,\n        currentConfirmedCount,\n        confirmedCount,\n        suspectedCount,\n        curedCount,\n        deadCount,\n      };\n    }\n  });\n  const geoObj: any = {};\n  geodata.features.forEach((feature: any) => {\n    const { name } = feature.properties;\n    geoObj[name] = feature.properties;\n    const ncov = ncovDataObj[name] || {};\n    feature.properties = {\n      ...feature.properties,\n      ...ncov,\n    };\n  });\n  return geodata;\n}\nconst World = React.memo(function Map() {\n  const [data, setData] = React.useState();\n  const [filldata, setfillData] = React.useState();\n  React.useEffect(() => {\n    const fetchData = async () => {\n      const [geoData, ncovData] = await Promise.all([\n        fetch(\n          'https://gw.alipayobjects.com/os/bmw-prod/e62a2f3b-ea99-4c98-9314-01d7c886263d.json',\n        ).then((d) => d.json()),\n        // https://lab.isaaclin.cn/nCoV/api/area?latest=1\n        fetch(\n          'https://gw.alipayobjects.com/os/bmw-prod/0676f102-22f6-4c75-ab12-1ae200834b1c.json',\n        ).then((d) => d.json()),\n      ]);\n      const worldData = joinData(geoData, ncovData.results);\n      const pointdata = worldData.features.map((feature: any) => {\n        return feature.properties;\n      });\n      setfillData(worldData);\n      setData(pointdata);\n    };\n    fetchData();\n  }, []);\n  return (\n    <>\n      <MapboxScene\n        map={{\n          center: [110.19382669582967, 50.258134],\n          pitch: 50,\n          style: 'blank',\n          zoom: 1,\n        }}\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n        }}\n      >\n        {data && [\n          <PolygonLayer\n            key={'1'}\n            options={{\n              autoFit: true,\n            }}\n            source={{\n              data: filldata,\n            }}\n            scale={{\n              values: {\n                confirmedCount: {\n                  type: 'quantile',\n                },\n              },\n            }}\n            color={{\n              values: '#ddd',\n            }}\n            shape={{\n              values: 'fill',\n            }}\n            style={{\n              opacity: 1,\n            }}\n          />,\n          <LineLayer\n            key={'3'}\n            source={{\n              data: filldata,\n            }}\n            size={{\n              values: 0.6,\n            }}\n            color={{\n              values: '#fff',\n            }}\n            shape={{\n              values: 'line',\n            }}\n            style={{\n              opacity: 1,\n            }}\n          />,\n          <PointLayer\n            key={'2'}\n            options={{\n              autoFit: true,\n            }}\n            source={{\n              data,\n              parser: {\n                type: 'json',\n                coordinates: 'centroid',\n              },\n            }}\n            scale={{\n              values: {\n                confirmedCount: {\n                  type: 'log',\n                },\n              },\n            }}\n            active={{\n              option: {\n                color: '#0c2c84',\n              },\n            }}\n            color={{\n              field: 'confirmedCount',\n              values: (count) => {\n                return count > 10000\n                  ? '#732200'\n                  : count > 1000\n                  ? '#CC3D00'\n                  : count > 500\n                  ? '#FF6619'\n                  : count > 100\n                  ? '#FF9466'\n                  : count > 10\n                  ? '#FFC1A6'\n                  : count > 1\n                  ? '#FCE2D7'\n                  : 'rgb(255,255,255)';\n              },\n            }}\n            shape={{\n              values: 'cylinder',\n            }}\n            size={{\n              field: 'confirmedCount',\n              values: (count: number) => {\n                const height =\n                  count > 10000\n                    ? 70\n                    : count > 1000\n                    ? 40\n                    : count > 500\n                    ? 30\n                    : count > 100\n                    ? 20\n                    : count > 10\n                    ? 10\n                    : count > 1\n                    ? 5\n                    : 1;\n                return [5, 5, height];\n              },\n            }}\n            style={{\n              opacity: 1,\n            }}\n          />,\n        ]}\n      </MapboxScene>\n    </>\n  );\n});\n\nReactDOM.render(<World />, document.getElementById('map'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/l7-react\", \"react\", \"react-dom\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/l7-react\"), require(\"react\"), require(\"react-dom\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.l7React, global.react, global.reactDom);\n    global.covid_column = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_l7React, React, _reactDom) {\n  \"use strict\";\n\n  React = _interopRequireWildcard(React);\n  _reactDom = _interopRequireDefault(_reactDom);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  function joinData(geodata, ncovData) {\n    var ncovDataObj = {};\n    ncovData.forEach(function (item) {\n      var countryName = item.countryName,\n          countryEnglishName = item.countryEnglishName,\n          currentConfirmedCount = item.currentConfirmedCount,\n          confirmedCount = item.confirmedCount,\n          suspectedCount = item.suspectedCount,\n          curedCount = item.curedCount,\n          deadCount = item.deadCount;\n\n      if (countryName === '中国') {\n        if (!ncovDataObj[countryName]) {\n          ncovDataObj[countryName] = {\n            countryName: 0,\n            countryEnglishName: countryEnglishName,\n            currentConfirmedCount: 0,\n            confirmedCount: 0,\n            suspectedCount: 0,\n            curedCount: 0,\n            deadCount: 0\n          };\n        } else {\n          ncovDataObj[countryName].currentConfirmedCount += currentConfirmedCount;\n          ncovDataObj[countryName].confirmedCount += confirmedCount;\n          ncovDataObj[countryName].suspectedCount += suspectedCount;\n          ncovDataObj[countryName].curedCount += curedCount;\n          ncovDataObj[countryName].deadCount += deadCount;\n        }\n      } else {\n        ncovDataObj[countryName] = {\n          countryName: countryName,\n          countryEnglishName: countryEnglishName,\n          currentConfirmedCount: currentConfirmedCount,\n          confirmedCount: confirmedCount,\n          suspectedCount: suspectedCount,\n          curedCount: curedCount,\n          deadCount: deadCount\n        };\n      }\n    });\n    var geoObj = {};\n    geodata.features.forEach(function (feature) {\n      var name = feature.properties.name;\n      geoObj[name] = feature.properties;\n      var ncov = ncovDataObj[name] || {};\n      feature.properties = { ...feature.properties,\n        ...ncov\n      };\n    });\n    return geodata;\n  }\n\n  var World = React.memo(function Map() {\n    var _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        data = _React$useState2[0],\n        setData = _React$useState2[1];\n\n    var _React$useState3 = React.useState(),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        filldata = _React$useState4[0],\n        setfillData = _React$useState4[1];\n\n    React.useEffect(function () {\n      var fetchData = async function fetchData() {\n        var _ref = await Promise.all([fetch('https://gw.alipayobjects.com/os/bmw-prod/e62a2f3b-ea99-4c98-9314-01d7c886263d.json').then(function (d) {\n          return d.json();\n        }), // https://lab.isaaclin.cn/nCoV/api/area?latest=1\n        fetch('https://gw.alipayobjects.com/os/bmw-prod/0676f102-22f6-4c75-ab12-1ae200834b1c.json').then(function (d) {\n          return d.json();\n        })]),\n            _ref2 = _slicedToArray(_ref, 2),\n            geoData = _ref2[0],\n            ncovData = _ref2[1];\n\n        var worldData = joinData(geoData, ncovData.results);\n        var pointdata = worldData.features.map(function (feature) {\n          return feature.properties;\n        });\n        setfillData(worldData);\n        setData(pointdata);\n      };\n\n      fetchData();\n    }, []);\n    return React.createElement(React.Fragment, null, React.createElement(_l7React.MapboxScene, {\n      map: {\n        center: [110.19382669582967, 50.258134],\n        pitch: 50,\n        style: 'blank',\n        zoom: 1\n      },\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0\n      }\n    }, data && [React.createElement(_l7React.PolygonLayer, {\n      key: '1',\n      options: {\n        autoFit: true\n      },\n      source: {\n        data: filldata\n      },\n      scale: {\n        values: {\n          confirmedCount: {\n            type: 'quantile'\n          }\n        }\n      },\n      color: {\n        values: '#ddd'\n      },\n      shape: {\n        values: 'fill'\n      },\n      style: {\n        opacity: 1\n      }\n    }), React.createElement(_l7React.LineLayer, {\n      key: '3',\n      source: {\n        data: filldata\n      },\n      size: {\n        values: 0.6\n      },\n      color: {\n        values: '#fff'\n      },\n      shape: {\n        values: 'line'\n      },\n      style: {\n        opacity: 1\n      }\n    }), React.createElement(_l7React.PointLayer, {\n      key: '2',\n      options: {\n        autoFit: true\n      },\n      source: {\n        data: data,\n        parser: {\n          type: 'json',\n          coordinates: 'centroid'\n        }\n      },\n      scale: {\n        values: {\n          confirmedCount: {\n            type: 'log'\n          }\n        }\n      },\n      active: {\n        option: {\n          color: '#0c2c84'\n        }\n      },\n      color: {\n        field: 'confirmedCount',\n        values: function values(count) {\n          return count > 10000 ? '#732200' : count > 1000 ? '#CC3D00' : count > 500 ? '#FF6619' : count > 100 ? '#FF9466' : count > 10 ? '#FFC1A6' : count > 1 ? '#FCE2D7' : 'rgb(255,255,255)';\n        }\n      },\n      shape: {\n        values: 'cylinder'\n      },\n      size: {\n        field: 'confirmedCount',\n        values: function values(count) {\n          var height = count > 10000 ? 70 : count > 1000 ? 40 : count > 500 ? 30 : count > 100 ? 20 : count > 10 ? 10 : count > 1 ? 5 : 1;\n          return [5, 5, height];\n        }\n      },\n      style: {\n        opacity: 1\n      }\n    })]));\n  });\n\n  _reactDom.default.render(React.createElement(World, null), document.getElementById('map'));\n});"},{"relativePath":"react/covid/demo/covid_extrude.tsx","absolutePath":"/Users/lizhengxue/Documents/AntV/github/l7-release/L7/examples/react/covid/demo/covid_extrude.tsx","order":5,"filename":"covid_extrude.tsx","title":"3D 填充图","screenshot":"https://gw.alipayobjects.com/mdn/rms_855bab/afts/img/A*cuMmRqXzQu4AAAAAAAAAAABkARQnAQ","source":"import {\n  LineLayer,\n  MapboxScene,\n  Marker,\n  PolygonLayer,\n  Popup,\n} from '@antv/l7-react';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nfunction joinData(geodata: any, ncovData: any) {\n  const ncovDataObj: any = {};\n  ncovData.forEach((item: any) => {\n    const {\n      countryName,\n      countryEnglishName,\n      currentConfirmedCount,\n      confirmedCount,\n      suspectedCount,\n      curedCount,\n      deadCount,\n    } = item;\n    if (countryName === '中国') {\n      if (!ncovDataObj[countryName]) {\n        ncovDataObj[countryName] = {\n          countryName: 0,\n          countryEnglishName,\n          currentConfirmedCount: 0,\n          confirmedCount: 0,\n          suspectedCount: 0,\n          curedCount: 0,\n          deadCount: 0,\n        };\n      } else {\n        ncovDataObj[countryName].currentConfirmedCount += currentConfirmedCount;\n        ncovDataObj[countryName].confirmedCount += confirmedCount;\n        ncovDataObj[countryName].suspectedCount += suspectedCount;\n        ncovDataObj[countryName].curedCount += curedCount;\n        ncovDataObj[countryName].deadCount += deadCount;\n      }\n    } else {\n      ncovDataObj[countryName] = {\n        countryName,\n        countryEnglishName,\n        currentConfirmedCount,\n        confirmedCount,\n        suspectedCount,\n        curedCount,\n        deadCount,\n      };\n    }\n  });\n  const geoObj: any = {};\n  geodata.features.forEach((feature: any) => {\n    const { name } = feature.properties;\n    geoObj[name] = feature.properties;\n    const ncov = ncovDataObj[name] || {};\n    feature.properties = {\n      ...feature.properties,\n      ...ncov,\n    };\n  });\n  return geodata;\n}\n\nconst World = React.memo(function Map() {\n  const [data, setData] = React.useState();\n  React.useEffect(() => {\n    const fetchData = async () => {\n      const [geoData, ncovData] = await Promise.all([\n        fetch(\n          'https://gw.alipayobjects.com/os/bmw-prod/e62a2f3b-ea99-4c98-9314-01d7c886263d.json',\n        ).then((d) => d.json()),\n         // https://lab.isaaclin.cn/nCoV/api/area?latest=1\n         fetch(\n          'https://gw.alipayobjects.com/os/bmw-prod/0676f102-22f6-4c75-ab12-1ae200834b1c.json',\n        ).then((d) => d.json()),\n      ]);\n      setData(joinData(geoData, ncovData.results));\n    };\n    fetchData();\n  }, []);\n  return (\n    <>\n      <MapboxScene\n        map={{\n          center: [110.19382669582967, 50.258134],\n          pitch: 50,\n          style: 'blank',\n          zoom: 1,\n        }}\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n        }}\n      >\n        {data && [\n          <PolygonLayer\n            key={'1'}\n            options={{\n              autoFit: true,\n            }}\n            source={{\n              data,\n            }}\n            scale={{\n              values: {\n                confirmedCount: {\n                  type: 'quantile',\n                },\n              },\n            }}\n            active={{\n              option: {\n                color: '#0c2c84',\n              },\n            }}\n            color={{\n              field: 'confirmedCount',\n              values: (count) => {\n                return count > 10000\n                  ? '#732200'\n                  : count > 1000\n                  ? '#CC3D00'\n                  : count > 500\n                  ? '#FF6619'\n                  : count > 100\n                  ? '#FF9466'\n                  : count > 10\n                  ? '#FFC1A6'\n                  : count > 1\n                  ? '#FCE2D7'\n                  : 'rgb(255,255,255)';\n              },\n            }}\n            shape={{\n              values: 'extrude',\n            }}\n            size={{\n              field: 'confirmedCount',\n              values: [0, 200000, 600000, 800000, 1000000],\n            }}\n            style={{\n              opacity: 1,\n            }}\n          />,\n          <LineLayer\n            key={'2'}\n            source={{\n              data,\n            }}\n            size={{\n              values: 0.6,\n            }}\n            color={{\n              values: '#aaa',\n            }}\n            shape={{\n              values: 'line',\n            }}\n            style={{\n              opacity: 1,\n            }}\n          />,\n        ]}\n      </MapboxScene>\n    </>\n  );\n});\nReactDOM.render(<World />, document.getElementById('map'));\n","babeledSource":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/l7-react\", \"react\", \"react-dom\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/l7-react\"), require(\"react\"), require(\"react-dom\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.l7React, global.react, global.reactDom);\n    global.covid_extrude = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_l7React, React, _reactDom) {\n  \"use strict\";\n\n  React = _interopRequireWildcard(React);\n  _reactDom = _interopRequireDefault(_reactDom);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  function joinData(geodata, ncovData) {\n    var ncovDataObj = {};\n    ncovData.forEach(function (item) {\n      var countryName = item.countryName,\n          countryEnglishName = item.countryEnglishName,\n          currentConfirmedCount = item.currentConfirmedCount,\n          confirmedCount = item.confirmedCount,\n          suspectedCount = item.suspectedCount,\n          curedCount = item.curedCount,\n          deadCount = item.deadCount;\n\n      if (countryName === '中国') {\n        if (!ncovDataObj[countryName]) {\n          ncovDataObj[countryName] = {\n            countryName: 0,\n            countryEnglishName: countryEnglishName,\n            currentConfirmedCount: 0,\n            confirmedCount: 0,\n            suspectedCount: 0,\n            curedCount: 0,\n            deadCount: 0\n          };\n        } else {\n          ncovDataObj[countryName].currentConfirmedCount += currentConfirmedCount;\n          ncovDataObj[countryName].confirmedCount += confirmedCount;\n          ncovDataObj[countryName].suspectedCount += suspectedCount;\n          ncovDataObj[countryName].curedCount += curedCount;\n          ncovDataObj[countryName].deadCount += deadCount;\n        }\n      } else {\n        ncovDataObj[countryName] = {\n          countryName: countryName,\n          countryEnglishName: countryEnglishName,\n          currentConfirmedCount: currentConfirmedCount,\n          confirmedCount: confirmedCount,\n          suspectedCount: suspectedCount,\n          curedCount: curedCount,\n          deadCount: deadCount\n        };\n      }\n    });\n    var geoObj = {};\n    geodata.features.forEach(function (feature) {\n      var name = feature.properties.name;\n      geoObj[name] = feature.properties;\n      var ncov = ncovDataObj[name] || {};\n      feature.properties = { ...feature.properties,\n        ...ncov\n      };\n    });\n    return geodata;\n  }\n\n  var World = React.memo(function Map() {\n    var _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        data = _React$useState2[0],\n        setData = _React$useState2[1];\n\n    React.useEffect(function () {\n      var fetchData = async function fetchData() {\n        var _ref = await Promise.all([fetch('https://gw.alipayobjects.com/os/bmw-prod/e62a2f3b-ea99-4c98-9314-01d7c886263d.json').then(function (d) {\n          return d.json();\n        }), // https://lab.isaaclin.cn/nCoV/api/area?latest=1\n        fetch('https://gw.alipayobjects.com/os/bmw-prod/0676f102-22f6-4c75-ab12-1ae200834b1c.json').then(function (d) {\n          return d.json();\n        })]),\n            _ref2 = _slicedToArray(_ref, 2),\n            geoData = _ref2[0],\n            ncovData = _ref2[1];\n\n        setData(joinData(geoData, ncovData.results));\n      };\n\n      fetchData();\n    }, []);\n    return React.createElement(React.Fragment, null, React.createElement(_l7React.MapboxScene, {\n      map: {\n        center: [110.19382669582967, 50.258134],\n        pitch: 50,\n        style: 'blank',\n        zoom: 1\n      },\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0\n      }\n    }, data && [React.createElement(_l7React.PolygonLayer, {\n      key: '1',\n      options: {\n        autoFit: true\n      },\n      source: {\n        data: data\n      },\n      scale: {\n        values: {\n          confirmedCount: {\n            type: 'quantile'\n          }\n        }\n      },\n      active: {\n        option: {\n          color: '#0c2c84'\n        }\n      },\n      color: {\n        field: 'confirmedCount',\n        values: function values(count) {\n          return count > 10000 ? '#732200' : count > 1000 ? '#CC3D00' : count > 500 ? '#FF6619' : count > 100 ? '#FF9466' : count > 10 ? '#FFC1A6' : count > 1 ? '#FCE2D7' : 'rgb(255,255,255)';\n        }\n      },\n      shape: {\n        values: 'extrude'\n      },\n      size: {\n        field: 'confirmedCount',\n        values: [0, 200000, 600000, 800000, 1000000]\n      },\n      style: {\n        opacity: 1\n      }\n    }), React.createElement(_l7React.LineLayer, {\n      key: '2',\n      source: {\n        data: data\n      },\n      size: {\n        values: 0.6\n      },\n      color: {\n        values: '#aaa'\n      },\n      shape: {\n        values: 'line'\n      },\n      style: {\n        opacity: 1\n      }\n    })]));\n  });\n\n  _reactDom.default.render(React.createElement(World, null), document.getElementById('map'));\n});"}]}}}}